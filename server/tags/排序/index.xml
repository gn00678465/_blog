<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排序 on MADAO&#39;s Blog</title>
    <link>/tags/%E6%8E%92%E5%BA%8F/</link>
    <description>Recent content in 排序 on MADAO&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Mon, 01 Feb 2021 14:34:22 +0800</lastBuildDate><atom:link href="/tags/%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[演算法] Insertion Sort / 插入排序</title>
      <link>/posts/algorithm/insertion_sort/</link>
      <pubDate>Mon, 01 Feb 2021 14:34:22 +0800</pubDate>
      
      <guid>/posts/algorithm/insertion_sort/</guid>
      <description>Bubble Sort / 泡沫排序 插入排序與泡沫排序同為排序演算法中比較基礎的方式，所需的時間會隨著數列的長度平方成長。
排序方式為從一個數列中，由第二個元素開始往前逐一比較，再將元素插入適當的位置。
可以參考動態的視覺網站，可以比較清楚的知道排序的方式。
排序流程 假設目前有一數列 [8, 5, 10, 6]
 第一輪排序。  取 5 開始往前比較， 8 &amp;gt; 5 ，交換。[5, 8, 10, 6]   第二輪排序  取 10 開始往前比較，8 &amp;lt; 10 不交換。 再往前比較， 5 &amp;lt; 10 不交換。[5, 8, 10, 6]   第三輪排序  取 6 開始往前比較， 10 &amp;gt; 6 交換。[5, 8, 6, 10] 再往前比較， 8 &amp;gt; 6 交換。[5, 6, 8, 10] 再往前比較， 5 &amp;lt; 6 不交換。   排序完成   以上流程，排序次數為數列長度 - 1。  時間複雜度  要執行 n - 1 輪，每輪要比較 1 &amp;hellip; n-1 次。   當數列元素有 4 個時，需要比對 $1 + 2 + 3 = 6$ 次。 當數列元素有 5 個時，需要比對 $1 + 2 + 3 + 4 = 10$ 次。 當數列元素有 n 個時，需要比對  $1 + &amp;hellip; (n - 1) = (n * (n - 1))/2 = n^2/2 - n/2$ (等差級數) 當 n 有無限 $\infty$ 多個元素時，平方以外的值可以忽略不計。   Insertion Sort 的時間複雜度為 $O(n^2)$，平方成長。  JavaScript 插入排序 function insertionSort(arr) { for (let i = 1; i &amp;lt; arr.</description>
    </item>
    
    <item>
      <title>[演算法] Bubble Sort / 泡沫排序</title>
      <link>/posts/algorithm/bubble_sort/</link>
      <pubDate>Mon, 01 Feb 2021 10:49:42 +0800</pubDate>
      
      <guid>/posts/algorithm/bubble_sort/</guid>
      <description>Bubble Sort / 泡沫排序 泡沫排序是排序演算法中比較基礎的方式，所需的時間會隨著數列的長度平方成長。
排序方式為從一個數列中，由左至右取出兩個元素比較，將較大的元素與較小的元素交換，反之則不動，直到整個數列排序完成。
可以參考動態的視覺網站，可以比較清楚的知道排序的方式。
排序流程 假設目前有一數列 [8, 5, 10, 6]
 第一輪排序。  $8 &amp;gt; 5$ 交換。[5, 8, 10, 6] $8 &amp;lt; 10$ 不須交換。 $10 &amp;gt; 6$ 交換。[5, 8, 6, 10]   最大值 10 排到最右邊，共比對 3 次。   第二輪排序。  $5 &amp;lt; 8$ 不須交換。 $8 &amp;gt; 6$ 交換。[5, 6, 8, 10]   只需比對到倒數第二個，共比對 2 次。   第三輪排序  $5 &amp;lt; 6$ 不須交換。   只需比對到倒數第三個，共比對 1 次。 [5, 6, 8, 10]   排序完成   以上流程，排序次數為數列長度 - 1。  時間複雜度  要執行 n - 1 輪，每輪要比較 n-1 &amp;hellip; 1 次。   當數列元素有 4 個時，需要比對 $3 + 2 + 1 = 6$ 次。 當數列元素有 5 個時，需要比對 $4 + 3 + 2 + 1 = 10$ 次。 當數列元素有 n 個時，需要比對  $(n-1) + (n-2) + &amp;hellip; + 1 = (n * (n - 1))/2 = n^2/2 - n/2$ (等差級數) 當 n 有無限 $\infty$ 多個元素時，平方以外的值可以忽略不計。   Bubble Sort 的時間複雜度為 $O(n^2)$，平方成長。  JavaScript 泡沫排序 function bubbleSort(arr) { for (let i = arr.</description>
    </item>
    
  </channel>
</rss>
